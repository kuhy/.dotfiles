#+TITLE: Emacs config
#+AUTHOR: Kuhy
#+PROPERTY: header-args+ :comments yes
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :tangle "~/.emacs.d/init.el"
#+PROPERTY: header-args+ :noweb tangle
#+OPTIONS: prop:t

#+INCLUDE: "../variables.org"

* General
Hide toolbars.
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(add-to-list 'default-frame-alist
             '(vertical-scroll-bars . nil))
#+END_SRC

Fix problem with downloading =undo-tree=.
=undo-tree= is required by Evil and other packages.
#+BEGIN_SRC elisp
;(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

Load package manager, add the Melpa package registry.
#+BEGIN_SRC elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;(setq package-check-signature nil)
(package-initialize)
#+END_SRC

Bootstrap use-package.
#+BEGIN_SRC elisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

Hide default welcome screen.
#+BEGIN_SRC elisp
(setq inhibit-startup-screen t)
#+END_SRC

Install package automatically if not already present on your system.
#+BEGIN_SRC elisp
(setq use-package-always-ensure t)
#+END_SRC

Setup font.
#+BEGIN_SRC elisp
(add-to-list 'default-frame-alist
  '(font . "monoid"))
(set-face-attribute 'default t :font "monoid" :height 100)
#+END_SRC

Display relative line number
#+BEGIN_SRC elisp
(setq-default display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)
#+END_SRC

Highlight trailing whitespaces
#+BEGIN_SRC elisp
(setq-default show-trailing-whitespace t)
#+END_SRC
fsaf

Save typing one or two characters:
#+BEGIN_SRC elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Org
Alow to run dot files from =org-mode=.
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t))) ; this line activates dot
#+END_SRC

Highlight LaTeX commands inside Org Mode.
#+BEGIN_SRC elisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

Change org-mode exporting process to pdf.
Needed for bibtex support.
#+BEGIN_SRC elisp
(setq org-latex-pdf-process
      '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f %f"))
#+END_SRC

Run org-mode code snippets without confirmation.
#+BEGIN_SRC elisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Set org-mode keybindings:
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

* Packages
Use dashboard as a welcome screen.
#+BEGIN_SRC elisp
(use-package dashboard
  :custom
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-startup-banner 3)
  (dashboard-center-content t)
  (dashboard-items '((recents  . 5)
                     (bookmarks . 5)
                     (projects . 5)
                     (agenda . 5)
                     (registers . 5)))
  (initial-buffer-choice (lambda () (switch-to-buffer "*dashboard*")))
  :config
  (dashboard-setup-startup-hook)
)
#+END_SRC

Minor mode that hides the mode-line
#+BEGIN_SRC elisp
(use-package hide-mode-line)
#+END_SRC

Package to display a terminal in an Emacs buffer.
#+BEGIN_SRC elisp
(use-package vterm)
#+END_SRC

Use editorconfig.
#+BEGIN_SRC elisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC

Alows managing window configurations similary to tiling WMs.
#+BEGIN_SRC elisp
;(use-package eyebrowse
;  :config
;  (eyebrowse-mode)
;  (eyebrowse-setup-opinionated-keys))
#+END_SRC

Support for vim keybindings.
#+BEGIN_SRC elisp
(use-package evil
  :defer .1
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode))
#+END_SRC

Collection of Evil bindings
#+BEGIN_SRC elisp
(use-package evil-collection
  :after evil
  :custom (evil-collection-company-use-tng nil)
  :config
  (evil-collection-init))
#+END_SRC

Customizable key sequence to escape from insert state
and everything else in Emacs.
#+BEGIN_SRC elisp
(use-package evil-escape
  :custom
  (evil-escape-unordered-key-sequence t)
  :config
  (evil-escape-mode))
#+END_SRC

Tool for minibuffer completion.
#+BEGIN_SRC elisp
(use-package ivy
  :defer .1
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  :config
  (ivy-mode))
#+END_SRC

=Counsel=, a collection of Ivy-enhanced versions of common Emacs commands.
#+BEGIN_SRC elisp
(use-package counsel
  :after ivy
  :config (counsel-mode))
#+END_SRC

More friendly interface for ivy.
#+BEGIN_SRC elisp
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-rich-path-style 'abbrev)
  :config
  (ivy-rich-mode 1))
#+END_SRC

Package that displays available keybindings in popup.
#+BEGIN_SRC elisp
(use-package which-key
  :defer 0.2
  :diminish
  :config (which-key-mode))
#+END_SRC

=Git= interface.
#+BEGIN_SRC elisp
(use-package magit)
#+END_SRC

=Magit= support for =evil-mode=.
#+BEGIN_SRC elisp
(use-package evil-magit
  :after (evil magit))
#+END_SRC

Package for highlighting uncommitted changes.
#+BEGIN_SRC elisp
(use-package diff-hl
  :demand t
  :hook (magit-post-refresh diff-hl-magit-post-refresh)
  :config (global-diff-hl-mode))
#+END_SRC

LaTeX
#+BEGIN_SRC elisp
(use-package tex
  :defer t
  :ensure auctex
  :config
  (TeX-source-correlate-mode)
  (add-to-list 'TeX-view-program-selection
               '(output-pdf "Zathura")))
#+END_SRC

Markdown support:
#+BEGIN_SRC elisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

Cucumber support:
#+BEGIN_SRC elisp
(use-package feature-mode)
#+END_SRC

Support for Groovy syntax highlighting:
#+BEGIN_SRC elisp
(use-package groovy-mode)
#+END_SRC

Project Interaction Library
#+BEGIN_SRC elisp
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

On the fly syntax checking for GNU Emacs
#+BEGIN_SRC elisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

Text completion framework
#+BEGIN_SRC elisp
(use-package company)
#+END_SRC

Emacs client/library for the Language Server Protocol
#+BEGIN_SRC elisp
(use-package lsp-mode
  :hook (python-mode . lsp)
  :hook (java-mode . lsp)
  :commands lsp)

(use-package lsp-ui
  :custom
  (lsp-ui-sideline-enable nil)
  (lsp-ui-doc-delay 1.5)
  :commands lsp-ui-mode)

(use-package company-lsp :commands company-lsp)
#+END_SRC

Debug adapter protocol
#+BEGIN_SRC elisp
(use-package dap-mode
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))
#+END_SRC

LSP for Java
#+BEGIN_SRC elisp
(use-package hydra)
(use-package lsp-java :after lsp
  :config (add-hook 'java-mode-hook 'lsp)
          (require 'dap-java))
#+END_SRC

A template system
#+BEGIN_SRC elisp
(use-package yasnippet-snippets)
(use-package yasnippet
  :config (yas-global-mode 1))
#+END_SRC

Groovy syntax highlighting
#+BEGIN_SRC elisp
(use-package groovy-mode)
#+END_SRC

Evil for org-mode
#+BEGIN_SRC elisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

Treemacs
#+BEGIN_SRC elisp
(use-package treemacs
  :bind ("C-=" . treemacs)
  :hook (treemacs-mode . hide-mode-line-mode))

(use-package treemacs-evil
  :after treemacs evil)

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package lsp-treemacs
  :after treemacs lsp)

(use-package kaolin-themes
  :config
  (require 'kaolin-themes-treemacs))
#+END_SRC

Highlight indentation
#+BEGIN_SRC elisp
(use-package highlight-indent-guides
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-character ?\|)
  (highlight-indent-guides-responsive 'top)
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

Icon fonts for emacs.  Needs manual installation of the fonts: =M-x
all-the-icons-install-fonts=
#+BEGIN_SRC elisp
(use-package all-the-icons)
#+END_SRC

Better mode-line
#+BEGIN_SRC elisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-icon t))
#+END_SRC

Tab support
#+BEGIN_SRC elisp
(use-package centaur-tabs
  :demand
  :custom
  (centaur-tabs-set-icons t)
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-set-close-button nil)
  :bind
    (:map evil-normal-state-map
	  ("g t" . centaur-tabs-forward)
	  ("g T" . centaur-tabs-backward))
  :config
  (centaur-tabs-mode t))
#+END_SRC

Pop-up shell
#+BEGIN_SRC elisp
(use-package shell-pop
  :hook (
  (shell-pop-in-after . hide-mode-line-mode)
  (shell-pop-in-after . centaur-tabs-local-mode))
  :bind ("C-:" . shell-pop)
  :custom
  (shell-pop-window-size 25)
  (shell-pop-term-shell "/usr/bin/fish")
  (shell-pop-shell-type '("vterm" "*vterm*" (lambda nil (vterm))))
)
#+END_SRC

Visually distinguish active windows
#+BEGIN_SRC elisp
(use-package dimmer
  :custom
  (dimmer-fraction 0.3)
  :config
  (dimmer-configure-which-key)
  (dimmer-mode t))
#+END_SRC

Display visual hint on evil edit operations
#+BEGIN_SRC elisp
(use-package evil-goggles
  :config (evil-goggles-mode))
#+END_SRC

Scroll bar
#+BEGIN_SRC elisp
(use-package yascroll
  :config
  (progn
    (global-yascroll-bar-mode 1)
    (set-face-attribute 'yascroll:thumb-fringe t
      :background "<<base03>>"
      :foreground "<<base03>>")
  ))
#+END_SRC

Add support for grammarly
#+BEGIN_SRC elisp
;(use-package flycheck-grammarly)
#+END_SRC

Show free keybindings for modkeys or prefixes
#+BEGIN_SRC elisp
(use-package free-keys)
#+END_SRC

Simple but effective sorting and filtering for Emacs:
#+BEGIN_SRC elisp
(use-package prescient
  :config (prescient-persist-mode))

(use-package ivy-prescient
  :after counsel
  :config (ivy-prescient-mode))

(use-package company-prescient
  :config (company-prescient-mode))
#+END_SRC

* Theme
Set base 16 theme:
#+BEGIN_SRC elisp
(use-package base16-theme
  :init
  (setq base16-default-dark-colors
  '(:base00 "<<base00>>"
    :base01 "<<base01>>"
    :base02 "<<base02>>"
    :base03 "<<base03>>"
    :base04 "<<base04>>"
    :base05 "<<base05>>"
    :base06 "<<base06>>"
    :base07 "<<base07>>"
    :base08 "<<base08>>"
    :base09 "<<base09>>"
    :base0A "<<base0A>>"
    :base0B "<<base0B>>"
    :base0C "<<base0C>>"
    :base0D "<<base0D>>"
    :base0E "<<base0E>>"
    :base0F "<<base0F>>"))
  :config
  (load-theme 'base16-default-dark t)
  (custom-set-faces
    '(diff-hl-change ((t (:background "<<base0E>>" :foreground "<<base0E>>"))))
    '(diff-hl-delete ((t (:background "<<base08>>" :foreground "<<base08>>"))))
    '(diff-hl-insert ((t (:background "<<base0B>>" :foreground "<<base0B>>"))))
  )
)
#+END_SRC

Set the cursor color based on the evil state
#+BEGIN_SRC elisp
(defvar my/base16-colors base16-default-dark-colors)
(setq evil-emacs-state-cursor   `(,(plist-get my/base16-colors :base0D) box)
      evil-insert-state-cursor  `(,(plist-get my/base16-colors :base0D) bar)
      evil-motion-state-cursor  `(,(plist-get my/base16-colors :base0E) box)
      evil-normal-state-cursor  `(,(plist-get my/base16-colors :base0B) box)
      evil-replace-state-cursor `(,(plist-get my/base16-colors :base08) bar)
      evil-visual-state-cursor  `(,(plist-get my/base16-colors :base09) box))
#+END_SRC
