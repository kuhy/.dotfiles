#+TITLE: Scripts
#+AUTHOR: Kuhy
#+OPTIONS: prop:t
#+INCLUDE: "../variables.org"
#+INCLUDE: "../secrets.org"
/Here are defined personal scripts./
* Dotfiles tangling
  :PROPERTIES:
  :header-args: :tangle ~/bin/dot-tangle :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Following script installs and tangles literate dotfiles written in Org mode.

  Directory which contains dotfiles (same even with =sudo=):
  #+BEGIN_SRC sh
  if [ -v SUDO_USER ]; then
      USER_HOME=$(eval echo "~$SUDO_USER")
  else
      USER_HOME=$HOME
  fi

  DOTFILES_HOME=$USER_HOME/.dotfiles
  #+END_SRC

  Following function Exports Org file to another Org file.
  Exporting is needed because =#+INCLUDE= isn't executed during tangling.
  #+BEGIN_SRC sh
  emacs_export_to_org() {
      emacs -Q --batch --eval "
          (dolist (file command-line-args-left)
            (with-current-buffer
              (find-file-noselect file)
               (org-org-export-to-org)
            )
          )
        )" "$1"
  }
  #+END_SRC

  Following function tangles all specified Org files
  and decrypts entries encrypted by =org-crypt=.
  #+BEGIN_SRC sh
  emacs_tangle() {
      emacs -Q --batch --eval "
        (progn
          (require 'org-crypt)
          (require 'epa-file)
          (epa-file-enable)
          (setq org-crypt-key \"<<crypt_key>>\")
          (setf epa-pinentry-mode 'ask)
          (setq make-backup-files nil)
          (dolist (file command-line-args-left)
            (with-current-buffer
              (find-file-noselect file)
              (org-decrypt-entries)
              (org-babel-tangle)
            )
          )
        )" "$1"
  }
  #+END_SRC

  Export all Org files matching passed arguments except the files in the root directory:
  #+BEGIN_SRC sh
  FILES=$(find "$DOTFILES_HOME/$*" -path "$DOTFILES_HOME/[!.]*/*.org")
  emacs_export_to_org "$FILES"
  #+END_SRC

  Tangle exported files.
  #+BEGIN_SRC sh
  EXPORTED_FILES=${FILES//'.org'/.org.org}
  emacs_tangle "$EXPORTED_FILES"
  #+END_SRC

  Delete exported files.
  #+BEGIN_SRC sh
  rm "$EXPORTED_FILES"

  exit 0
  #+END_SRC
* System configuration
  :PROPERTIES:
  :header-args: :tangle ~/bin/dot-config :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Setups system after new installation.

  Configure MIME types and corresponding handlers using [[file:../system/mimeo.org][mimeo]].
  #+BEGIN_SRC sh
  mimeo --create emacs.desktop Emacs 'emacsclient -c -a emacs %F' 'glob:text/*' 'noterm'
  mimeo --prefer 'glob:text/*' emacs.desktop
  mimeo --create mpv.desktop mpv 'mpv %F' 'glob:video/*' 'noterm'
  mimeo --prefer 'glob:video/*' mpv.desktop
  mimeo --prefer 'glob:Video/*' mpv.desktop
  mimeo --create firefox.desktop Firefox 'firefox %U' 'glob:x-scheme-handler/*' 'noterm'
  mimeo --prefer 'glob:x-scheme-handler/*' firefox.desktop
  mimeo --create imv.desktop imv 'imv %F' 'glob:image/*' 'noterm'
  mimeo --prefer 'glob:image/*' imv.desktop
  mimeo --create zathura.desktop zathura 'zathura %F' 'application/pdf' 'noterm'
  mimeo --prefer 'application/pdf' zathura.desktop
  mimeo --create zathura.desktop zathura 'zathura %F' 'application/pdf' 'noterm'
  mimeo --prefer 'application/pdf' zathura.desktop
  mimeo --create audacity.desktop Audacity 'audacity %F' 'glob:audio/*' 'noterm'
  mimeo --prefer 'glob:audio/*' audacity.desktop
  #+END_SRC
* Orgcal
  :PROPERTIES:
  :header-args: :tangle ~/bin/orgcal :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Import given org files to google calendar:
  #+BEGIN_SRC sh
  CALENDAR="$1"

  yes | gcalcli --refresh --calendar "$CALENDAR" delete '*'

  shift

  FILES=$(find "$*" -name "*.org")

  emacs -Q --batch --eval "
      (dolist (file command-line-args-left)
          (with-current-buffer
            (find-file-noselect file)
            (org-icalendar-export-to-ics)
          )
      )" "$FILES"

  for file in ${FILES//'.org'/.ics}; do
      gcalcli import "$file" --calendar "$CALENDAR"
  done
  #+END_SRC
* Music player
  :PROPERTIES:
  :header-args: :tangle ~/bin/mplayer :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Open music player in tmux session:
  #+BEGIN_SRC sh
  if ! tmux has -t='<<music_player>>'; then
      echo "creating <<music_player>> session"
      tmux new-session -d -s <<music_player>> <<music_player>>
  fi

  <<terminal>> -e 'tmux attach-session -t <<music_player>>'
  #+END_SRC
* Blackify PDF
  :PROPERTIES:
  :header-args: :tangle ~/bin/blackpdf :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Convert a color PDF to greyscale PDF.
  Very useful for black-and-white book readers.
  #+BEGIN_SRC sh
  for FILE in "$@"; do
      gs \
        -sOutputFile="$FILE".temp \
        -sDEVICE=pdfwrite \
        -sColorConversionStrategy=Gray \
        -dProcessColorModel=/DeviceGray \
        -dCompatibilityLevel=1.4 \
        -dNOPAUSE \
        -dBATCH \
        "$FILE"

      rm "$FILE"

      mv "$FILE".temp "$FILE"
  done
  #+END_SRC
