#+TITLE: Scripts
#+AUTHOR: Kuhy
#+OPTIONS: prop:t
#+INCLUDE: "../variables.org"
#+INCLUDE: "../secrets.org"
/Here are defined personal scripts./
* Orgcal
  :PROPERTIES:
  :header-args: :tangle ~/bin/orgcal :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Import given org files to google calendar:
  #+BEGIN_SRC sh
    CALENDAR="$1"

    yes | gcalcli --refresh --calendar "$CALENDAR" delete '*'

    shift

    FILES=$(find "$*" -name "*.org")

    emacs -Q --batch --eval "
        (dolist (file command-line-args-left)
            (with-current-buffer
              (find-file-noselect file)
              (org-icalendar-export-to-ics)
            )
        )" "$FILES"

    for file in ${FILES//'.org'/.ics}; do
        gcalcli import "$file" --calendar "$CALENDAR"
    done
  #+END_SRC
* Music player
  :PROPERTIES:
  :header-args: :tangle ~/bin/mplayer :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Open music player in tmux session:
  #+BEGIN_SRC sh
    if ! tmux has -t='<<music_player>>'; then
        echo "creating <<music_player>> session"
        tmux new-session -d -s <<music_player>> <<music_player>>
    fi

    <<terminal>> tmux attach-session -t <<music_player>>
  #+END_SRC
* Blackify PDF
  :PROPERTIES:
  :header-args: :tangle ~/bin/blackpdf :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  Convert a color PDF to greyscale PDF.
  Very useful for black-and-white book readers.
  #+BEGIN_SRC sh
    for FILE in "$@"; do
        gs \
          -sOutputFile="$FILE".temp \
          -sDEVICE=pdfwrite \
          -sColorConversionStrategy=Gray \
          -dProcessColorModel=/DeviceGray \
          -dCompatibilityLevel=1.4 \
          -dNOPAUSE \
          -dBATCH \
          "$FILE"

        rm "$FILE"

        mv "$FILE".temp "$FILE"
    done
  #+END_SRC
* COMMENT Password picker
  :PROPERTIES:
  :header-args: :tangle ~/bin/passpick :comments both :shebang "#!/bin/env bash" :mkdirp yes :noweb tangle
  :END:
  #+BEGIN_SRC sh
    # ARG_OPTIONAL_BOOLEAN([login],[l],[copy login for given record])
    # ARG_HELP([password picker])
    # ARGBASH_GO()

    shopt -s nullglob globstar

    die()
    {
      local _ret="${2:-1}"
      test "${_PRINT_HELP:-no}" = yes && print_help >&2
      echo "$1" >&2
      exit "${_ret}"
    }


    begins_with_short_option()
    {
      local first_option all_short_options='h'
      first_option="${1:0:1}"
      test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
    }

    # THE DEFAULTS INITIALIZATION - OPTIONALS
    _arg_login="off"


    print_help()
    {
      printf '%s\n' "password picker"
      printf 'Usage: %s [--(no-)login] [-h|--help]\n' "$0"
      printf '\t%s\n' "--login, --no-login: copy login for given record (off by default)"
      printf '\t%s\n' "-h, --help: Prints help"
    }


    parse_commandline()
    {
      while test $# -gt 0
      do
	_key="$1"
	case "$_key" in
	  --no-login|--login)
	    _arg_login="on"
	    test "${1:0:5}" = "--no-" && _arg_login="off"
	    ;;
	  -h|--help)
	    print_help
	    exit 0
	    ;;
	  -h*)
	    print_help
	    exit 0
	    ;;
	  ,*)
	    _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
	    ;;
	esac
	shift
      done
    }

    parse_commandline "$@"

    prefix=${PASSWORD_STORE_DIR-~/.password-store}
    password_files=( "$prefix"/**/*.gpg )
    password_files=( "${password_files[@]#"$prefix"/}" )
    password_files=( "${password_files[@]%.gpg}" )

    password=$(printf '%s\n' "${password_files[@]}" | fuzzel -d)

    [[ -n $password ]] || exit

    echo "$_arg_login"
    echo [ "$_arg_login" == "off" ]

    if [ "$_arg_login" = "off" ]; then
      pass show -c "$password" 2>/dev/null
      cliphist list | head -n 1 | cliphist delete
    else
      pass show "$password" | grep login | awk '{print $2}' | wl-copy
    fi
  #+END_SRC
